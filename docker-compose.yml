services:
  frontend:
    container_name: frontend
    build: 
      context: ./src/frontend
      dockerfile: dockerfile.prod
    # image: atkaridarshan04/bookstore-frontend:prod.v1
    ports:
      - "80:80"
    env_file:
      - ./src/frontend/.env.docker
    networks:
      - docker-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: on-failure
    depends_on:
      # - backend
      backend:
        condition: service_healthy

  backend:
    container_name: backend
    build: 
      context: ./src/backend
      dockerfile: dockerfile.prod
    # image: atkaridarshan04/bookstore-backend:prod.v1
    ports:
      - "8000:8000"
    env_file:
      - ./src/backend/.env.docker
    networks:
      - docker-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8000', res => process.exit(res.statusCode >= 500 ? 1 : 0)).on('error', () => process.exit(1))"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: on-failure
    depends_on:
      mongodb:
        condition: service_healthy

  mongodb:
    container_name: mongodb
    image: mongo:4.4
    ports:
      - "27017:27017"
    networks:
      - docker-network
    # deploy:
    #   resources:
    #     limits:
    #       memory: 256M
    #       cpus: "0.5"
    healthcheck:
      test: ["CMD", "mongo", "--quiet", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: on-failure
    volumes:
      - mongodb-vol:/data/db

networks:
  docker-network:
    driver: bridge

volumes:
  mongodb-vol:
    driver: local